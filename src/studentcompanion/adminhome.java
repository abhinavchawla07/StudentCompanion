/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentcompanion;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.net.ServerSocket;
import java.net.Socket;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 *
 * @author anmol singh sethi
 */
public class adminhome extends javax.swing.JFrame {

    /**
     * Creates new form adminhome
     */
    String username;
     Dimension d;
    int w,h;

    public adminhome(String username) {
        initComponents();
        setSize(800, 800);
        this.username = username;
      
        new Thread(new server()).start();
           d = Toolkit.getDefaultToolkit().getScreenSize();
        w = d.width;
        h = d.height;
        setSize(d);
        jDesktopPane1.setSize(w-10,h-100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem8 = new javax.swing.JMenuItem();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        jMenuItem8.setText("jMenuItem8");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);
        getContentPane().add(jDesktopPane1);
        jDesktopPane1.setBounds(0, 0, 670, 760);

        jMenu2.setText("Add");

        jMenuItem5.setText("Departments");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Courses");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Subjects");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem9.setText("Students");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("View");

        jMenuItem1.setText("Department");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Course");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Subject");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Student");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Profile");

        jMenuItem10.setText("Settings");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem11.setText("Logout");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jDesktopPane1.removeAll();
        Viewdepartments lf = new Viewdepartments();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
        
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        Viewcourses lf = new Viewcourses();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        viewsubject lf = new viewsubject();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        viewstudents lf = new viewstudents();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        add_dept lf = new add_dept();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        addcourses lf = new addcourses();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        addsubject lf = new addsubject();
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        stuentsignup lf = new stuentsignup();
        lf.setVisible(true);
        lf.setSize(500,500);
        int width=w/2-250;
        int height=h/2-250;
        lf.setLocation(width, height);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.removeAll();
        newpassword lf = new newpassword(username);
        lf.setVisible(true);
        lf.setSize(w-10,h-100);
        lf.setResizable(true);
        lf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        lf.setIconifiable(true);
        lf.setMaximizable(true);
        lf.setClosable(true);
        jDesktopPane1.add(lf);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        admin_window aw =  new admin_window();
        aw.setVisible(true);
        aw.setSize(792,547);
        this.dispose();
        
        
        
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                adh.setVisible(true);
            }
        });
    }

    /*  
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
     */
    /**
     *
     * @author anmol singh sethi
     */
    public class server implements Runnable {

        public void run() {
            try {
                ServerSocket sersock = new ServerSocket(9000);

                System.out.println("Connection accepted");

                while (true) {
                    Socket sock = sersock.accept();

                    new Thread(new clienthandler(sock)).start();

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        class clienthandler implements Runnable {

            Socket sock;

            clienthandler(Socket sock) {
                this.sock = sock;
            }

            @Override
            public void run() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                try {
                    DataOutputStream dos;
                    dos = new DataOutputStream(sock.getOutputStream());

                    DataInputStream dis;
                    dis = new DataInputStream(sock.getInputStream());

                    dos.writeBytes("hello client\r\n");

                    while (true) {
                        String s = dis.readLine();
//                        System.out.println("Client: " + s);
                        if (s.equals("login request")) {
                            String rollno = dis.readLine();
                            String password = dis.readLine();

                            //JDBC
                            Class.forName("com.mysql.jdbc.Driver");
//            System.out.println("Driver Loading done");

                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
//            System.out.println("Connection Created");

                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
//            System.out.println("Statement Created");

                            ResultSet rs = stmt.executeQuery("select * from student where rollno='" + rollno + "' and password='" + password + "'");
                            dos.writeBytes("login response\r\n");
                            if (rs.next()) {
//                                System.out.println("hello in if");
                                dos.writeBytes("success\r\n");

                            } else {
//                                System.out.println("hello on else");
                                dos.writeBytes("failed\r\n");
                            }

                            rs.close();
                            stmt.close();
                            conn.close();

                        } else if (s.equals("change password request")) {
                            String rollno = dis.readLine();
                            String oldp = dis.readLine();
                            String newp = dis.readLine();

                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from student where rollno='" + rollno + "' and password='" + oldp + "'");
                            dos.writeBytes("change password response\r\n");
                            if (rs.next()) {
                                rs.updateString("password", newp);
                                rs.updateRow();
                                dos.writeBytes("success\r\n");
                            } else {
                                dos.writeBytes("failed\r\n");
                            }
                            rs.close();
                            stmt.close();
                            conn.close();
                        } else if (s.equals("Send subject code")) {
                            int semester = dis.readInt();
                            String rollno = dis.readLine();

                            //JDBC
                            Class.forName("com.mysql.jdbc.Driver");
//            System.out.println("Driver Loading done");

                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
//            System.out.println("Connection Created");

                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
//            System.out.println("Statement Created");

                            ResultSet rs = stmt.executeQuery("select * from student where rollno='" + rollno + "'");
                            String course = "";
                            if (rs.next()) {
                                course = rs.getString("course");
                            }

                            System.out.println(course);
                            Statement stmt1 = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
//            System.out.println("Statement Created");

                            ResultSet rs1 = stmt1.executeQuery("select * from subjects where semester='" + semester + "' and coursename='" + course + "'");

                            dos.writeBytes("subject code response\r\n");
                            while (rs1.next()) {
                                String subjectcode = rs1.getString("subjectcode");
                                dos.writeBytes(subjectcode + "\r\n");
                            }
                            dos.writeBytes("end\r\n");
                            rs.close();
                            stmt.close();
                            conn.close();
                        } else if (s.equals("upload request")) {
                            String title = dis.readLine();
                            System.out.println(title);
                            String description = dis.readLine();
                            String type = dis.readLine();
                            int year = dis.readInt();
                            String subjectcode = dis.readLine();
                            String semester = dis.readLine();
                            String rollno = dis.readLine();

                            String fname = dis.readLine();
                            long len = dis.readLong();

                            System.out.println(fname);

                            File f = new File("papers");
                            if (!f.exists()) {
                                f.mkdir();
                            }

                            FileOutputStream fos = new FileOutputStream(f + "/" + fname);
                            byte b[] = new byte[10000];
                            int count = 0;
                            while (true) {
                                int r = dis.read(b, 0, 10000);
                                count = count + r;
                                fos.write(b, 0, r);
                                if (count == len) {
                                    break;
                                }
                            }

                            fos.close();

                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from papers");
                            rs.moveToInsertRow();
                            rs.updateString("title", title);
                            rs.updateString("description", description);
                            rs.updateString("suubjectcode", subjectcode);
                            rs.updateString("type", type);
                            rs.updateString("postedby", rollno);
                            rs.updateInt("yearofexamination", year);
                            rs.updateInt("semester", Integer.parseInt(semester));
                            rs.updateString("filepath", f + "/" + fname);
                            rs.insertRow();
                            System.out.println("done");
                            dos.writeBytes("file uploaded\r\n");
                            rs.close();
                            stmt.close();
                            conn.close();
                        } else if (s.equals("show upload")) {
                            String rollno = dis.readLine();
                            Class.forName("com.mysql.jdbc.Driver");
//            System.out.println("Driver Loading done");

                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
//            System.out.println("Connection Created");

                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
//            System.out.println("Statement Created");

                            ResultSet rs = stmt.executeQuery("select * from papers where postedby='" + rollno + "'");
                            dos.writeBytes("show upload response\r\n");
                            while (rs.next()) {
                                dos.writeBytes(rs.getString("title") + "\r\n");
                                dos.writeBytes(rs.getString("description") + "\r\n");
                                dos.writeBytes(rs.getString("dateofupload") + "\r\n");
                                dos.writeBytes(rs.getString("suubjectcode") + "\r\n");
                                dos.writeInt(rs.getInt("paperid"));
                            }

                            dos.writeBytes("end\r\n");
                            rs.close();
                            stmt.close();
                            conn.close();

                        } else if (s.equals("delete paper")) {
                            int paperid = dis.readInt();
                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from papers where paperid=" + paperid);
                            if (rs.next()) {
                                rs.deleteRow();
                            }
                            dos.writeBytes("deleted successfully\r\n");
                            rs.close();
                            stmt.close();
                            conn.close();
                        } else if (s.equals("send recent notes")) {
                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from papers where type='notes' order by dateofupload");
                            dos.writeBytes("sending recent notes\r\n");
                            while (rs.next()) {
                                dos.writeBytes(rs.getString("title") + "\r\n");
                                dos.writeBytes(rs.getString("description") + "\r\n");
                                dos.writeBytes(rs.getString("dateofupload") + "\r\n");
                                dos.writeBytes(rs.getString("postedby") + "\r\n");
                                dos.writeInt(rs.getInt("paperid"));
                            }
                            dos.writeBytes("end\r\n");
                            rs.close();
                            stmt.close();
                            conn.close();
                        } else if (s.equals("send recent papers")) {
                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from papers where type='papers' order by dateofupload");
                            dos.writeBytes("sending recent papers\r\n");
                            while (rs.next()) {
                                System.out.println("in while");
                                dos.writeBytes(rs.getString("title") + "\r\n");
                                dos.writeBytes(rs.getString("description") + "\r\n");
                                dos.writeBytes(rs.getString("dateofupload") + "\r\n");
                                dos.writeBytes(rs.getString("postedby") + "\r\n");
                                dos.writeBytes(rs.getString("yearofexamination") + "\r\n");
                                dos.writeInt(rs.getInt("paperid"));
                            }
                            dos.writeBytes("end\r\n");
                            rs.close();
                            stmt.close();
                            conn.close();
                        } else if (s.equals("Search query")) {
                            String s2 = dis.readLine();
                            String search = dis.readLine();
                            dos.writeBytes("search response\r\n");
                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                    ResultSet.CONCUR_UPDATABLE);

                            if (s2.equals("notes")) {
                                ResultSet rs = stmt.executeQuery("select * from papers where type='notes' and title like '%" + search + "%'");
                                while (rs.next()) {
                                    dos.writeBytes(rs.getString("title") + "\r\n");
                                    dos.writeBytes(rs.getString("description") + "\r\n");
                                    dos.writeBytes(rs.getString("dateofupload") + "\r\n");
                                    dos.writeBytes(rs.getString("postedby") + "\r\n");
//                                dos.writeBytes(rs.getString("yearofexamination") + "\r\n");
                                    dos.writeInt(rs.getInt("paperid"));
                                }
                            } else if (s2.equals("papers")) {
                                ResultSet rs = stmt.executeQuery("select * from papers where type='papers' and title like '%" + search + "%'");
                                while (rs.next()) {
                                    dos.writeBytes(rs.getString("title") + "\r\n");
                                    dos.writeBytes(rs.getString("description") + "\r\n");
                                    dos.writeBytes(rs.getString("dateofupload") + "\r\n");
                                    dos.writeBytes(rs.getString("postedby") + "\r\n");
                                    dos.writeBytes(rs.getString("yearofexamination") + "\r\n");
                                    dos.writeInt(rs.getInt("paperid"));
                                }
                            }

                            dos.writeBytes("end\r\n");
//                            String 
                        }
                        else if(s.equals("send details"))
                        {
                            int paperid = dis.readInt();
                            System.out.println(paperid);
                             Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                            ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from papers where paperid='"+paperid+"'");
                            if(rs.next())
                            {
                                    System.out.println("in if");
                                    dos.writeBytes("sending response\r\n");
                                    dos.writeBytes(rs.getString("title") + "\r\n");
                                    dos.writeBytes(rs.getString("description") + "\r\n");
                                    dos.writeBytes(rs.getString("dateofupload") + "\r\n");
                                    dos.writeBytes(rs.getString("postedby") + "\r\n");
                                    dos.writeBytes(rs.getString("yearofexamination") + "\r\n");
                                    dos.writeBytes(rs.getString("semester") + "\r\n");
                                    dos.writeBytes(rs.getString("type") + "\r\n");
                                    dos.writeBytes(rs.getString("suubjectcode") + "\r\n");
                                    dos.writeBytes(rs.getString("filepath") + "\r\n");
                                
                            }
                                
                             
                        }else if(s.equals("download file"))
                        {
                            String filepath=dis.readLine();
                            FileInputStream fis = new FileInputStream(filepath);
                            File f =new File(filepath);
                            long len = f.length();
                            String name =f.getName();
                            
                            dos.writeBytes("Download started\r\n");
                            dos.writeBytes(name+"\r\n");
                            dos.writeLong(len);
                            
                            byte b[] =new byte[10000];
                            int count=0;
                            while(true)
                            {
                                int r = fis.read(b, 0, 10000);
                                count = count+r;
                                dos.write(b, 0, r);
                                if(count==len)
                                {
                                    break;
                                }
                            }
                            
                            
                        }
                        else if(s.equals("forgot pass"))
                        {
                            String roll=dis.readLine();
                            
                            
                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                            ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from student where rollno='"+roll+"'");
                            if(rs.next())
                            {
                                dos.writeBytes("sending response\r\n");
                                dos.writeBytes(rs.getString("email") +"\r\n");
                                dos.writeBytes(rs.getString("password") +"\r\n");
                                dos.writeBytes(rs.getString("phone") +"\r\n");
                                
                                
                            }
//                            dos.writeBytes("end\r\n");
                        }
                        else if(s.equals("signup"))
                        {
                            String rollno=dis.readLine();
                            String name=dis.readLine();
                            String phone=dis.readLine();
                            String fname=dis.readLine();
                            String email=dis.readLine();
                            String dob=dis.readLine();
                            String gender=dis.readLine();
                            String password=dis.readLine();
                            String photo=dis.readLine();
                            String dept=dis.readLine();
                            String course=dis.readLine();
                            
                            
                            Class.forName("com.mysql.jdbc.Driver");
                            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/student_companion", "root", "system");
                            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                            ResultSet.CONCUR_UPDATABLE);
                            ResultSet rs = stmt.executeQuery("select * from student where rollno='"+rollno+"'");
                            if(rs.next())
                            {
                                dos.writeBytes("exists\r\n");
                            }
                            else
                            {
                                dos.writeBytes("success");
                                rs.moveToInsertRow();
                                rs.updateString("rollno", rollno);
                                rs.updateString("name", name);
                                rs.updateString("course", course);
                                rs.updateString("gender", gender);
                                rs.updateString("fname", fname);
                                rs.updateString("phone", phone);
                                rs.updateString("password", password);
                                rs.updateString("email", email);
                                rs.updateString("dob", dob);
                                rs.updateString("photo", photo);
                                rs.insertRow();
                            }
                        }
                        
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables
}
