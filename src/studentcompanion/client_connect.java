/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentcompanion;

import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author anmol singh sethi
 */
public class client_connect extends javax.swing.JFrame {

    /**
     * Creates new form client_connect
     */
    String rollno;
    DataOutputStream dos;
    DataInputStream dis;
    changepasswordclient cp;
    ArrayList<papers> al = new ArrayList<>();
    ArrayList<papers> al2 = new ArrayList<>();
    ArrayList<papers> al3 = new ArrayList<>();
    ArrayList<papers> als = new ArrayList<>();
    ArrayList<String> al_h = new ArrayList<>();
    mytable model = new mytable();
    tablehist model2 = new tablehist();

    public client_connect() {
        
        
        initComponents();
//         Credentials.ip = JOptionPane.showInputDialog(rootPane,"Enter Server's IP");
        
        
        new Thread(new client()).start();
        jtp.setVisible(false);
        setSize(1920, 1080);
        jTable1.setModel(model);
        jTable2.setModel(model2);
        panelnotes.setPreferredSize(new Dimension(400, 2000));
        panelpaper.setPreferredSize(new Dimension(400, 2000));
//        rbsn.isSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel15 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jp2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfrollno = new javax.swing.JTextField();
        btlogin = new javax.swing.JButton();
        tfpassword = new javax.swing.JPasswordField();
        jPanel8 = new javax.swing.JPanel();
        btfp = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jtp = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        p2 = new javax.swing.JPanel();
        tfsearch = new javax.swing.JTextField();
        btsearch = new javax.swing.JButton();
        rbsn = new javax.swing.JRadioButton();
        rbsp = new javax.swing.JRadioButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        panelsearch = new javax.swing.JPanel();
        p1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        panelnotes = new javax.swing.JPanel();
        p3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        panelpaper = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        lb_welcome = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpupload = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbsem = new javax.swing.JComboBox<String>();
        cbsubcode = new javax.swing.JComboBox<String>();
        rbnotes = new javax.swing.JRadioButton();
        rbpapers = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        tf_title = new javax.swing.JTextField();
        lb_year = new javax.swing.JLabel();
        tf_year = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_desc = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        tf_file = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btdelete = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        delete = new javax.swing.JButton();

        jLabel15.setText("jLabel15");

        jTextField5.setText("jTextField5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 0, 204));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(null);

        jp2.setBackground(new java.awt.Color(0, 0, 0));
        jp2.setForeground(new java.awt.Color(153, 153, 153));
        jp2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Enter rollno");
        jp2.add(jLabel1);
        jLabel1.setBounds(230, 10, 118, 27);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter password");
        jp2.add(jLabel2);
        jLabel2.setBounds(420, 20, 141, 27);
        jp2.add(tfrollno);
        tfrollno.setBounds(220, 40, 147, 47);

        btlogin.setText("Login");
        btlogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btloginActionPerformed(evt);
            }
        });
        jp2.add(btlogin);
        btlogin.setBounds(620, 40, 121, 47);
        jp2.add(tfpassword);
        tfpassword.setBounds(420, 40, 160, 50);

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));
        jPanel8.setLayout(null);
        jp2.add(jPanel8);
        jPanel8.setBounds(320, -30, 1220, 880);

        jPanel1.add(jp2);
        jp2.setBounds(210, 30, 779, 107);

        btfp.setBackground(new java.awt.Color(255, 255, 255));
        btfp.setText("Forgot Password");
        btfp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btfpActionPerformed(evt);
            }
        });
        jPanel1.add(btfp);
        btfp.setBounds(990, 70, 130, 50);

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));
        jPanel7.setLayout(null);
        jPanel1.add(jPanel7);
        jPanel7.setBounds(0, 0, 530, 790);

        jButton4.setText("SignUp");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(1170, 70, 160, 50);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-1, -1, 1830, 170);

        jtp.setBackground(new java.awt.Color(102, 102, 102));
        jtp.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jtp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jtpStateChanged(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setLayout(null);

        p2.setBackground(new java.awt.Color(204, 204, 255));
        p2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p2.setLayout(null);

        tfsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfsearchActionPerformed(evt);
            }
        });
        p2.add(tfsearch);
        tfsearch.setBounds(20, 20, 370, 60);

        btsearch.setText("Search");
        btsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsearchActionPerformed(evt);
            }
        });
        p2.add(btsearch);
        btsearch.setBounds(10, 90, 170, 50);

        rbsn.setBackground(new java.awt.Color(204, 204, 255));
        buttonGroup2.add(rbsn);
        rbsn.setSelected(true);
        rbsn.setText("notes");
        p2.add(rbsn);
        rbsn.setBounds(200, 100, 53, 23);

        rbsp.setBackground(new java.awt.Color(204, 204, 255));
        buttonGroup2.add(rbsp);
        rbsp.setText("papers");
        p2.add(rbsp);
        rbsp.setBounds(340, 100, 59, 23);

        panelsearch.setBackground(new java.awt.Color(255, 255, 255));
        panelsearch.setPreferredSize(new java.awt.Dimension(450, 2000));
        panelsearch.setLayout(null);
        jScrollPane5.setViewportView(panelsearch);

        p2.add(jScrollPane5);
        jScrollPane5.setBounds(10, 160, 450, 410);

        jPanel3.add(p2);
        p2.setBounds(540, 0, 480, 590);

        p1.setBackground(new java.awt.Color(204, 204, 255));
        p1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p1.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel6.setText("Recent Notes");
        p1.add(jLabel6);
        jLabel6.setBounds(50, 20, 360, 50);

        panelnotes.setBackground(new java.awt.Color(204, 204, 255));
        panelnotes.setForeground(new java.awt.Color(102, 102, 255));
        panelnotes.setLayout(null);
        jScrollPane3.setViewportView(panelnotes);

        p1.add(jScrollPane3);
        jScrollPane3.setBounds(0, 60, 510, 530);

        jPanel3.add(p1);
        p1.setBounds(0, 0, 510, 590);

        p3.setBackground(new java.awt.Color(204, 204, 255));
        p3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        p3.setLayout(null);

        jLabel10.setBackground(new java.awt.Color(204, 204, 255));
        jLabel10.setFont(new java.awt.Font("Monotype Corsiva", 1, 24)); // NOI18N
        jLabel10.setText("Recent Papers");
        p3.add(jLabel10);
        jLabel10.setBounds(10, 10, 390, 50);

        panelpaper.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout panelpaperLayout = new javax.swing.GroupLayout(panelpaper);
        panelpaper.setLayout(panelpaperLayout);
        panelpaperLayout.setHorizontalGroup(
            panelpaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        panelpaperLayout.setVerticalGroup(
            panelpaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(panelpaper);

        p3.add(jScrollPane4);
        jScrollPane4.setBounds(0, 50, 500, 540);

        jPanel3.add(p3);
        p3.setBounds(1040, 0, 500, 590);

        jtp.addTab("Homepage", jPanel3);

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));
        jPanel5.setLayout(null);

        jButton1.setText("Change Password");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1);
        jButton1.setBounds(250, 90, 300, 50);

        lb_welcome.setText("Welcome");
        jPanel5.add(lb_welcome);
        lb_welcome.setBounds(240, 10, 260, 40);

        jtp.addTab("Settings", jPanel5);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setLayout(null);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel2);
        jPanel2.setBounds(0, 0, 513, 1);

        jpupload.setBackground(new java.awt.Color(102, 102, 102));
        jpupload.setLayout(null);

        jLabel3.setText("select semester");
        jpupload.add(jLabel3);
        jLabel3.setBounds(0, 48, 104, 32);

        jLabel4.setText("selelct subject code");
        jpupload.add(jLabel4);
        jLabel4.setBounds(0, 100, 156, 42);

        jLabel5.setText("select type");
        jpupload.add(jLabel5);
        jLabel5.setBounds(0, 160, 123, 40);

        cbsem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---", "1", "2", "3", "4", "5", "6", "7", "8" }));
        cbsem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbsemItemStateChanged(evt);
            }
        });
        cbsem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbsemActionPerformed(evt);
            }
        });
        jpupload.add(cbsem);
        cbsem.setBounds(260, 40, 129, 32);

        jpupload.add(cbsubcode);
        cbsubcode.setBounds(263, 98, 143, 42);

        rbnotes.setBackground(new java.awt.Color(102, 102, 102));
        buttonGroup1.add(rbnotes);
        rbnotes.setText("notes");
        rbnotes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnotesItemStateChanged(evt);
            }
        });
        rbnotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnotesActionPerformed(evt);
            }
        });
        jpupload.add(rbnotes);
        rbnotes.setBounds(153, 166, 53, 23);

        rbpapers.setBackground(new java.awt.Color(102, 102, 102));
        buttonGroup1.add(rbpapers);
        rbpapers.setText("papers");
        rbpapers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbpapersItemStateChanged(evt);
            }
        });
        jpupload.add(rbpapers);
        rbpapers.setBounds(317, 166, 59, 23);

        jLabel8.setText("Title");
        jpupload.add(jLabel8);
        jLabel8.setBounds(10, 250, 50, 14);
        jpupload.add(tf_title);
        tf_title.setBounds(170, 250, 220, 30);

        lb_year.setText("Examination Year");
        jpupload.add(lb_year);
        lb_year.setBounds(10, 210, 130, 14);
        jpupload.add(tf_year);
        tf_year.setBounds(170, 200, 230, 30);

        jLabel7.setText("Description");
        jpupload.add(jLabel7);
        jLabel7.setBounds(10, 310, 140, 40);

        ta_desc.setColumns(20);
        ta_desc.setRows(5);
        jScrollPane1.setViewportView(ta_desc);

        jpupload.add(jScrollPane1);
        jScrollPane1.setBounds(170, 300, 210, 96);

        jLabel9.setText("Select File");
        jpupload.add(jLabel9);
        jLabel9.setBounds(20, 420, 110, 20);
        jpupload.add(tf_file);
        tf_file.setBounds(180, 420, 120, 20);

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jpupload.add(jButton2);
        jButton2.setBounds(320, 420, 67, 23);

        jButton3.setText("Upload");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jpupload.add(jButton3);
        jButton3.setBounds(150, 470, 65, 23);

        jPanel4.add(jpupload);
        jpupload.setBounds(520, 0, 450, 510);

        jScrollPane2.setViewportView(jTable1);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(0, 42, 500, 420);

        btdelete.setText("Delete");
        btdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btdeleteActionPerformed(evt);
            }
        });
        jPanel4.add(btdelete);
        btdelete.setBounds(220, 490, 79, 23);

        jtp.addTab("My Uploads", jPanel4);

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));
        jPanel6.setLayout(null);

        jScrollPane6.setViewportView(jTable2);

        jPanel6.add(jScrollPane6);
        jScrollPane6.setBounds(99, 24, 1360, 450);

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel6.add(delete);
        delete.setBounds(630, 500, 290, 60);

        jtp.addTab("History", jPanel6);

        getContentPane().add(jtp);
        jtp.setBounds(0, 170, 1550, 620);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btloginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btloginActionPerformed
        rollno = tfrollno.getText();
        String password = tfpassword.getText();

        if (rollno.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter all columns");
        } else {
            try {

                dos.writeBytes("login request\r\n");
                dos.writeBytes(rollno + "\r\n");
                dos.writeBytes(password + "\r\n");

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btloginActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        cp = new changepasswordclient(rollno, dos);
        cp.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbsemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbsemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbsemActionPerformed

    private void cbsemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbsemItemStateChanged
        try {

            dos.writeBytes("Send subject code\r\n");
            dos.writeInt(Integer.parseInt(cbsem.getSelectedItem().toString()));
            dos.writeBytes(rollno + "\r\n");

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_cbsemItemStateChanged

    private void rbnotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnotesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbnotesActionPerformed

    private void rbnotesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnotesItemStateChanged

        lb_year.setVisible(false);
        tf_year.setVisible(false);

    }//GEN-LAST:event_rbnotesItemStateChanged

    private void rbpapersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbpapersItemStateChanged
        lb_year.setVisible(true);
        tf_year.setVisible(true);
    }//GEN-LAST:event_rbpapersItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            String title = tf_title.getText();
            String description = ta_desc.getText();
            String filebrowse = tf_file.getText();

            String type = "";

            if (rbnotes.isSelected()) {
                type = "notes";
            } else {
                type = "papers";
            }

            int year = 0;
            if (type.equals("papers")) {
                year = Integer.parseInt(tf_year.getText());
            }

            String subjectcode = cbsubcode.getSelectedItem().toString();
            String semester = cbsem.getSelectedItem().toString();

            dos.writeBytes("upload request\r\n");
            dos.writeBytes(title + "\r\n");
            dos.writeBytes(description + "\r\n");
            dos.writeBytes(type + "\r\n");
            dos.writeInt(year);
            dos.writeBytes(subjectcode + "\r\n");
            dos.writeBytes(semester + "\r\n");
            dos.writeBytes(rollno + "\r\n");

            FileInputStream fis = new FileInputStream(filebrowse);
            File f = new File(filebrowse);

            dos.writeBytes(f.getName() + "\r\n");
            dos.writeLong(f.length());

            int count = 0;
            byte b[] = new byte[10000];
            while (true) {
                int r = fis.read(b, 0, 10000);
                count = count + r;
                dos.write(b, 0, r);
                if (count == f.length()) {
                    break;
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(client_connect.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        JFileChooser jfc = new JFileChooser();

        int ans = jfc.showOpenDialog(this);
        if (ans == JFileChooser.APPROVE_OPTION) {
            tf_file.setText(jfc.getSelectedFile().getPath());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jtpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jtpStateChanged
  /*      if (dos != null) {
            if (jtp.getSelectedComponent() == jPanel4) {
                try {
                    dos.writeBytes("show upload\r\n");
                    dos.writeBytes(rollno + "\r\n");

                } catch (Exception ex) {

                    ex.printStackTrace();
                }

            } else if (jtp.getSelectedComponent() == jPanel3) {
                try {
                    dos.writeBytes("send recent notes\r\n");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (jtp.getSelectedComponent() == jPanel6) {
                fetch();
            }
            // TODO add your handling code here:
        }
*/
    }//GEN-LAST:event_jtpStateChanged

    void fetch() {
        al_h.clear();
        File f = new File(System.getProperty("user.home") + "\\Downloads\\StudentCompanion");
        File f1[] = f.listFiles();
        for (int i = 0; i < f1.length; i++) {
            al_h.add(f1[i].getName());
        }
        model2.fireTableDataChanged();
    }


    private void btdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btdeleteActionPerformed
        int index = jTable1.getSelectedRow();
        if (index == -1) {
            JOptionPane.showMessageDialog(rootPane, "Select a row first");
        } else {
            int resp = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete selected ");
            if (resp == JOptionPane.YES_OPTION) {
                int paperid = al.get(index).paperid;
                try {
                    dos.writeBytes("delete paper\r\n");
                    dos.writeInt(paperid);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btdeleteActionPerformed

    private void tfsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfsearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfsearchActionPerformed

    private void btsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsearchActionPerformed
        String search = tfsearch.getText();
        try {
            dos.writeBytes("Search query\r\n");
            if (rbsn.isSelected()) {
                dos.writeBytes("notes\r\n");

            } else {
                dos.writeBytes("papers\r\n");
            }

            dos.writeBytes(search + "\r\n");

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_btsearchActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        int index = jTable2.getSelectedRow();
        if (index == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please Select a row first");
        } else {
            int ans = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete?");
            if (ans == JOptionPane.YES_OPTION) {
                File f = new File(System.getProperty("user.home") + "\\Downloads\\StudentCompanion\\" + al_h.get(index));
                f.delete();
                fetch();
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void btfpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btfpActionPerformed
        new forgotpass();
    }//GEN-LAST:event_btfpActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        signupclient sc=new signupclient();
        sc.setVisible(true);
        sc.setSize(900, 800);


// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client_connect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client_connect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client_connect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client_connect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new client_connect().setVisible(true);
            }
        });
    }

    public class client implements Runnable {

        public void run() {
            try {
                Socket sock
                        = new Socket(Credentials.ip, 9000);
                System.out.println("Connected to Server");
                dis = new DataInputStream(sock.getInputStream());
                dos = new DataOutputStream(sock.getOutputStream());

                dos.writeBytes("hello server\r\n");
                while (true) {
                    String s1 = dis.readLine();
                    System.out.println(s1);
                    if (s1.equals("login response")) {
                        String msg = dis.readLine();
                        if (msg.equals("success")) {
                            lb_welcome.setText("Welcome " + rollno);
                            jp2.setVisible(false);
                            jtp.setVisible(true);

                            dos.writeBytes("send recent notes\r\n");
                            JOptionPane.showMessageDialog(rootPane, "Login Successful");
                        } else if (msg.equals("failed")) {
                            JOptionPane.showMessageDialog(rootPane, "Please enter correct input");
                        }
                    } else if (s1.equals("change password response")) {
                        String msg = dis.readLine();
                        JOptionPane.showMessageDialog(rootPane, msg);
                        if (msg.equals("success")) {
                            cp.dispose();
                        }
                    } else if (s1.equals("subject code response")) {
                        cbsubcode.removeAllItems();
                        while (true) {
                            String code = dis.readLine();
                            System.out.println(code);
                            if (code.equals("end")) {
                                break;
                            } else {
                                cbsubcode.addItem(code);
                            }
                        }
                    } else if (s1.equals("file uploaded")) {
                        JOptionPane.showMessageDialog(rootPane, "File Uploaded successfully");
                        tf_year.setText("");
                        tf_title.setText("");
                        ta_desc.setText("");
                        tf_file.setText("");
                        dos.writeBytes("show upload\r\n");
                        dos.writeBytes(rollno + "\r\n");

                    } else if (s1.equals("show upload response")) {

                        al.clear();
                        while (true) {
                            String title = dis.readLine();
                            if (title.equals("end")) {
                                break;
                            }
                            String desc = dis.readLine();
                            String subjectid = dis.readLine();
                            String dateofupload = dis.readLine();

                            int paperid = dis.readInt();
                            al.add(new papers(title, desc, dateofupload, subjectid, paperid));
                        }
                        model.fireTableDataChanged();

                    } else if (s1.equals("deleted successfully")) {
                        dos.writeBytes("show upload\r\n");
                        dos.writeBytes(rollno + "\r\n");
                    } else if (s1.equals("sending recent notes")) {
                        al2.clear();
                        panelnotes.removeAll();
                        while (true) {
                            String title = dis.readLine();
                            if (title.equals("end")) {
                                break;
                            }
                            String desc = dis.readLine();
                            String dateofupload = dis.readLine();
                            String postedby = dis.readLine();
                            int paperid = dis.readInt();
                            al2.add(new papers(title, desc, dateofupload, paperid, postedby));

                        }
                        notespanel np[] = new notespanel[al2.size()];
                        panelnotes.setPreferredSize(new Dimension(400, 300 * al2.size()));
                        int y = 80;
                        for (int i = 0; i < al2.size(); i++) {
                            final int j = i;
                            np[i] = new notespanel();
                            np[i].setBounds(10, y, 400, 250);
                            np[i].addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    System.out.println("clicked");
                                    //super.mouseClicked(e); //To change body of generated methods, choose Tools | Templates.
                                    if (e.getClickCount() == 2) {
                                        try {
                                            downloadpane dp = new downloadpane(al2.get(j).paperid);
                                            dp.setVisible(true);
                                            dp.setSize(500, 600);
                                        } catch (IOException ex) {
                                            ex.printStackTrace();
                                        }

                                    }
                                }

                            });
                            np[i].title.setText("TITLE" + "     " + al2.get(i).title);
                            np[i].desc.setText("DESCRIPTION" + "        " + al2.get(i).desc);
                            np[i].dateofupload.setText("DATE OF UPLOAD" + "     " + al2.get(i).dateofupload);
                            np[i].postedby.setText("POSTED BY" + "      " + al2.get(i).postedby);
                            panelnotes.add(np[i]);
                            panelnotes.repaint();
                            y += 260;
                        }
                        dos.writeBytes("send recent papers\r\n");
                    } else if (s1.equals("sending recent papers")) {
                        al3.clear();
                        panelpaper.removeAll();
                        while (true) {
                            String title = dis.readLine();
                            System.out.println(title);
                            if (title.equals("end")) {
                                break;
                            }
                            String desc = dis.readLine();
                            String dateofupload = dis.readLine();
                            String postedby = dis.readLine();
                            String yearofexamination = dis.readLine();
                            int paperid = dis.readInt();
                            al3.add(new papers(title, desc, dateofupload, yearofexamination, postedby, paperid));

                        }
                        paperpanel pp[] = new paperpanel[al3.size()];
                        panelpaper.setPreferredSize(new Dimension(400, 300 * al3.size()));
                        int y = 80;
                        for (int i = 0; i < al3.size(); i++) {
                            final int j = i;
                            pp[i] = new paperpanel();
                            pp[i].setBounds(10, y, 400, 250);
                            pp[i].title.setText("TITLE" + "     " + al3.get(i).title);
                            pp[i].desc.setText("DESCRIPTION" + "        " + al3.get(i).desc);
                            pp[i].dateofupload.setText("DATE OF UPLOAD" + "     " + al3.get(i).dateofupload);
                            pp[i].postedby.setText("POSTED BY" + "      " + al3.get(i).postedby);
                            pp[i].yearofexamination.setText("YEAR OF EXAMINATION" + "       " + al3.get(i).yearofexamination);
                            pp[i].addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    //super.mouseClicked(e); //To change body of generated methods, choose Tools | Templates.
                                    if (e.getClickCount() == 2) {
                                        try {
                                            downloadpane dp = new downloadpane(al3.get(j).paperid);
                                            dp.setVisible(true);
                                            dp.setSize(500, 600);
                                        } catch (IOException ex) {
                                            ex.printStackTrace();
                                        }

                                    }
                                }

                            });
                            panelpaper.add(pp[i]);
                            panelpaper.repaint();
                            y += 260;
                        }
                    } else if (s1.equals("search response")) {
                        if (rbsn.isSelected()) {
                            try {
                                als.clear();
                                panelsearch.removeAll();
                                panelsearch.repaint();
                                while (true) {
                                    String title = dis.readLine();
                                    if (title.equals("end")) {
                                        break;
                                    }
                                    String desc = dis.readLine();
                                    String dateofupload = dis.readLine();
                                    String postedby = dis.readLine();
                                    int paperid = dis.readInt();
                                    als.add(new papers(title, desc, dateofupload, paperid, postedby));

                                }
                                notespanel np[] = new notespanel[als.size()];
                                panelsearch.setPreferredSize(new Dimension(400, 300 * als.size()));
                                int y = 80;
                                for (int i = 0; i < als.size(); i++) {
                                    final int j = i;
                                    np[i] = new notespanel();
                                    np[i].setBounds(10, y, 400, 250);
                                    np[i].title.setText("TITLE" + "     " + als.get(i).title);
                                    np[i].desc.setText("DESCRIPTION" + "        " + als.get(i).desc);
                                    np[i].dateofupload.setText("DATE OF UPLOAD" + "     " + als.get(i).dateofupload);
                                    np[i].postedby.setText("POSTED BY" + "      " + als.get(i).postedby);
                                    np[i].addMouseListener(new MouseAdapter() {
                                        @Override
                                        public void mouseClicked(MouseEvent e) {
                                            //super.mouseClicked(e); //To change body of generated methods, choose Tools | Templates.
                                            if (e.getClickCount() == 2) {
                                                try {
                                                    downloadpane dp = new downloadpane(al2.get(j).paperid);
                                                    dp.setVisible(true);
                                                    dp.setSize(700, 800);
                                                } catch (IOException ex) {
                                                    ex.printStackTrace();
                                                }

                                            }
                                        }

                                    });
                                    panelsearch.add(np[i]);
                                    panelsearch.repaint();
                                    y += 260;
                                }

                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            try {
                                als.clear();
                                panelsearch.removeAll();
                                panelsearch.repaint();
                                while (true) {
                                    String title = dis.readLine();
                                    System.out.println(title);
                                    if (title.equals("end")) {
                                        break;
                                    }
                                    String desc = dis.readLine();
                                    String dateofupload = dis.readLine();
                                    String postedby = dis.readLine();
                                    String yearofexamination = dis.readLine();
                                    int paperid = dis.readInt();
                                    als.add(new papers(title, desc, dateofupload, yearofexamination, postedby, paperid));

                                }
                                paperpanel pp[] = new paperpanel[als.size()];
                                int y = 80;
                                for (int i = 0; i < als.size(); i++) {
                                    pp[i] = new paperpanel();
                                    pp[i].setBounds(10, y, 400, 250);
                                    pp[i].title.setText("TITLE" + "     " + als.get(i).title);
                                    pp[i].desc.setText("DESCRIPTION" + "        " + als.get(i).desc);
                                    pp[i].dateofupload.setText("DATE OF UPLOAD" + "     " + als.get(i).dateofupload);
                                    pp[i].postedby.setText("POSTED BY" + "      " + als.get(i).postedby);
                                    pp[i].yearofexamination.setText("YEAR OF EXAMINATION" + "       " + als.get(i).yearofexamination);
                                    panelsearch.add(pp[i]);
                                    panelsearch.repaint();
                                    y += 260;
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                    }

                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    class mytable extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return al.get(rowIndex).title;
            } else if (columnIndex == 1) {
                return al.get(rowIndex).desc;
            } else if (columnIndex == 2) {
                return al.get(rowIndex).subjectid;
            } else {
                return al.get(rowIndex).dateofupload;
            }
        }

    }

    class tablehist extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al_h.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return al_h.get(rowIndex);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btdelete;
    private javax.swing.JButton btfp;
    private javax.swing.JButton btlogin;
    private javax.swing.JButton btsearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbsem;
    private javax.swing.JComboBox<String> cbsubcode;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JPanel jp2;
    private javax.swing.JPanel jpupload;
    private javax.swing.JTabbedPane jtp;
    private javax.swing.JLabel lb_welcome;
    private javax.swing.JLabel lb_year;
    private javax.swing.JPanel p1;
    private javax.swing.JPanel p2;
    private javax.swing.JPanel p3;
    private javax.swing.JPanel panelnotes;
    private javax.swing.JPanel panelpaper;
    private javax.swing.JPanel panelsearch;
    private javax.swing.JRadioButton rbnotes;
    private javax.swing.JRadioButton rbpapers;
    private javax.swing.JRadioButton rbsn;
    private javax.swing.JRadioButton rbsp;
    private javax.swing.JTextArea ta_desc;
    private javax.swing.JTextField tf_file;
    private javax.swing.JTextField tf_title;
    private javax.swing.JTextField tf_year;
    private javax.swing.JPasswordField tfpassword;
    private javax.swing.JTextField tfrollno;
    private javax.swing.JTextField tfsearch;
    // End of variables declaration//GEN-END:variables
}
